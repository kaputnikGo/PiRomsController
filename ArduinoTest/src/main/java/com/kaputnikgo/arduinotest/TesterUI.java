/**
 *  testing java to Arduino via usb serial.
 *  !! if Arduino IDE is running port cannot be opened
 *  
 */
package com.kaputnikgo.arduinotest;
import java.io.IOException;
import com.fazecast.jSerialComm.SerialPort;
import java.awt.Color;
/**
 *
 * @author kaputnikgo
 */
public class TesterUI extends javax.swing.JFrame {

    /**
     * Creates new form TesterUI
     */
    public TesterUI() {
        initComponents();    
    }
    
    SerialPort sp;
    int counter = 0;
    
    private void outputStatus(String text) {
        text = "\n" + text;
        statusText.append(text);
    }
    private void outputMulti(String text, int num) {
        text += num;
        outputStatus(text); 
    }
    
    protected void scanPorts() {
        // not finding the USB serial... need hardcoded?
        outputStatus("Commence scan.");
        SerialPort[] serialPorts = SerialPort.getCommPorts();
        SerialPort liveSerialPort = null;
        for (SerialPort p: serialPorts) {
            p.openPort();
            if (p.isOpen()) {
                liveSerialPort = p;
                outputStatus("Found port:");
                outputStatus(liveSerialPort.getSystemPortName());
                System.out.println("HERE opened port = " + liveSerialPort.getSystemPortName());
                break;
            }
        }
        outputStatus("End scan.");
        toggleScan(false);
    }
    
    protected boolean openSerial() {
        // hard coded for spackbook air usb left port
        sp = SerialPort.getCommPort("/dev/cu.usbmodem14201");
        sp.setComPortParameters(9600, 8, 1, 0);
        sp.setComPortTimeouts(SerialPort.TIMEOUT_WRITE_BLOCKING, 0, 0);
        
        if (sp.openPort()) {
            System.out.println("Port is open.");
            outputStatus("Port is open:");
            outputStatus(sp.getSystemPortName());
            return true;
        }
        else {
            System.out.println("Failed to open port.");
            outputStatus("Failed to open port.");
            return false;
        }
    }
    protected boolean closeSerial() {
        // check is open first
        if (sp.closePort()) {
            System.out.println("Port is closed.");
            outputStatus("Port is closed.");
            return true;
        }
        else {
            System.out.println("Failed to close port.");
            outputStatus("Failed to close port.");
            return false;
        }
    }
    protected void testSerial(int candy) throws IOException {
        // sends a byte to Arduino code that is awaiting.
        try {
            sp.getOutputStream().write(candy);
            sp.getOutputStream().flush();
            outputMulti("Sent number:", candy);
        }
        catch (IOException ex) {
            System.err.println("Caught IOException: " + ex.getMessage());
        }
        finally {
            //
        }
    }
    
    // need to now talk to Arduino code to do the talking to MCP23008 bits etc
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        connectButton = new javax.swing.JToggleButton();
        disconnectButton = new javax.swing.JToggleButton();
        appTitle = new javax.swing.JLabel();
        card1radio = new javax.swing.JRadioButton();
        card2radio = new javax.swing.JRadioButton();
        card3radio = new javax.swing.JRadioButton();
        card4radio = new javax.swing.JRadioButton();
        card5radio = new javax.swing.JRadioButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusText = new javax.swing.JTextArea();
        scannerButton = new javax.swing.JToggleButton();
        sendButton = new javax.swing.JToggleButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        connectButton.setText("Connect");
        connectButton.setToolTipText("connect to USB serial");
        connectButton.setSize(new java.awt.Dimension(78, 23));
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        disconnectButton.setText("Disconnect");
        disconnectButton.setToolTipText("disconnect USB serial");
        disconnectButton.setSize(new java.awt.Dimension(95, 23));
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        appTitle.setText("WiLL-i-ROMS java GUI tester");
        appTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        appTitle.setMixingCutoutShape(null);

        card1radio.setText("card1");
        card1radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card1radioActionPerformed(evt);
            }
        });

        card2radio.setText("card2");
        card2radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card2radioActionPerformed(evt);
            }
        });

        card3radio.setText("card3");
        card3radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card3radioActionPerformed(evt);
            }
        });

        card4radio.setText("card4");
        card4radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card4radioActionPerformed(evt);
            }
        });

        card5radio.setText("card5");
        card5radio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                card5radioActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        statusText.setColumns(20);
        statusText.setLineWrap(true);
        statusText.setRows(5);
        statusText.setText("Hello World!");
        jScrollPane2.setViewportView(statusText);

        scannerButton.setText("Scanner");
        scannerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scannerButtonActionPerformed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(card1radio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(card2radio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(card3radio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(card4radio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(card5radio))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(appTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(connectButton))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(disconnectButton)
                                .addGap(18, 18, 18)
                                .addComponent(scannerButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(108, 108, 108)
                                .addComponent(sendButton)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appTitle)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton)
                    .addComponent(disconnectButton)
                    .addComponent(scannerButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(card1radio)
                    .addComponent(card2radio)
                    .addComponent(card3radio)
                    .addComponent(card4radio)
                    .addComponent(card5radio))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void toggleConnectOn(boolean connection) {
        if (connection) {
            // is true for result of user connect
            connectButton.setBackground(Color.green);
            disconnectButton.setBackground(Color.gray);
            disconnectButton.setSelected(false);
        }
        else {
            // has error on connect
            connectButton.setBackground(Color.red);
            disconnectButton.setBackground(Color.gray);
        }
    }
    private void toggleConnectOff(boolean connection) {
        if (connection) {
            // is true for result of user disconnect
            disconnectButton.setBackground(Color.green);
            connectButton.setBackground(Color.gray);
            connectButton.setSelected(false);
        }
        else {
            disconnectButton.setBackground(Color.red);
            connectButton.setBackground(Color.gray);
        }
    }
    private void toggleScan(boolean scanit) {
        if (scanit) {
            scannerButton.setBackground(Color.green);
            scanPorts();
        }
        else {
           scannerButton.setBackground(Color.gray); 
        }
    }
    
    private void sendPin(boolean sender) throws IOException {
        if (sender) {
            // has sent pin/ sending loop/ check for connection
            sendButton.setBackground(Color.green);
            testSerial(counter);
            counter++;
        }
        else {
            sendButton.setBackground(Color.red);
        }
    }
    
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // toggle button for connect to USB serial
        // check for "checked" or on state first
        if (connectButton.isSelected()) {
            toggleConnectOn(openSerial());
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        // toggle button to disconnect from USB serial
        if (disconnectButton.isSelected()) {
            //
            toggleConnectOff(closeSerial());
        }
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void card1radioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card1radioActionPerformed
        // 
        if (card1radio.isSelected()) {
            // toggle CARD_1
            outputStatus("Card 1 selected.");
        }
        else {
            outputStatus("Card 1 deselected.");
        }
    }//GEN-LAST:event_card1radioActionPerformed

    private void card2radioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card2radioActionPerformed
        if (card2radio.isSelected()) {
            // toggle CARD_2
            outputStatus("Card 2 selected.");
        }
        else {
            outputStatus("Card 2 deselected.");
        }
    }//GEN-LAST:event_card2radioActionPerformed

    private void card3radioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card3radioActionPerformed
        if (card3radio.isSelected()) {
            // toggle CARD_3
            outputStatus("Card 3 selected.");
        }
        else {
            outputStatus("Card 3 deselected.");
        }
    }//GEN-LAST:event_card3radioActionPerformed

    private void card4radioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card4radioActionPerformed
        if (card4radio.isSelected()) {
            // toggle CARD_4
            outputStatus("Card 4 selected.");
        }
        else {
            outputStatus("Card 4 deselected.");
        }
    }//GEN-LAST:event_card4radioActionPerformed

    private void card5radioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_card5radioActionPerformed
        if (card5radio.isSelected()) {
            // toggle CARD_5
            outputStatus("Card 5 selected.");
        }
        else {
            outputStatus("Card 5 deselected.");
        }
    }//GEN-LAST:event_card5radioActionPerformed

    private void scannerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scannerButtonActionPerformed
        if (scannerButton.isSelected()) {
            toggleScan(true);
        }
        else {
            toggleScan(false);
        }
    }//GEN-LAST:event_scannerButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        if (sendButton.isSelected()) {
            sendButton.setBackground(Color.green);
            try {
                sendPin(true);
            }
            catch (Exception ex) {
                // all, caught above
            }
        } 
        else {
            sendButton.setBackground(Color.gray);
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TesterUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TesterUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TesterUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TesterUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TesterUI().setVisible(true);
            }
        });
    }

    protected javax.swing.JSpinner pinInt;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel appTitle;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JRadioButton card1radio;
    private javax.swing.JRadioButton card2radio;
    private javax.swing.JRadioButton card3radio;
    private javax.swing.JRadioButton card4radio;
    private javax.swing.JRadioButton card5radio;
    private javax.swing.JToggleButton connectButton;
    private javax.swing.JToggleButton disconnectButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToggleButton scannerButton;
    private javax.swing.JToggleButton sendButton;
    private javax.swing.JTextArea statusText;
    // End of variables declaration//GEN-END:variables
}
